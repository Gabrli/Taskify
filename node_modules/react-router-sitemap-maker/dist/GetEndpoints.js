"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const createRoutesFromChildren = (children) => {
    let routes = [];
    react_1.default.Children.forEach(children, element => {
        if (!react_1.default.isValidElement(element) || (typeof element.type === "string" ? element.type : element.type.name) !== "Route")
            return;
        const props = element.props;
        if (element.type === react_1.Fragment)
            return routes.push.apply(routes, createRoutesFromChildren(props.children));
        if (props.path === "*")
            return;
        let route = {
            caseSensitive: props.caseSensitive,
            element: props.element,
            index: props.index,
            path: props.path,
        };
        if (props.children)
            route.children = createRoutesFromChildren(props.children);
        routes.push(route);
    });
    return routes;
};
const addBaseToPath = (routes, paths, base) => {
    routes.forEach((route) => {
        const path = `${base}${route.index ? "" : route.path}`;
        paths.push(path);
        const children = route?.children;
        if (children?.length > 0) {
            paths.pop();
            addBaseToPath(children, paths, path);
        }
    });
};
/**
 * Parses the routes of the input element
 * @param routes A React element containing one or multiple Route elements
 * @returns {Array<string>} An array of all of the endpoints contained in the input ReactElement
 */
const GetEndpoints = (routes) => {
    if (!react_1.default.isValidElement(routes))
        return [];
    const { children } = routes.props;
    const routePaths = createRoutesFromChildren(children);
    const paths = [];
    routePaths.forEach((route) => {
        const path = `${route.index ? "/" : route.path}`;
        paths.push(path);
        const children = route?.children;
        if (children?.length > 0) {
            paths.pop();
            addBaseToPath(children, paths, path);
        }
    });
    return paths;
};
exports.default = GetEndpoints;
